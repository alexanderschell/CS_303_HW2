#include <iostream>

using namespace std;

// creating a node class
template <typename T>
class Node {
    public:
    T data;
    Node* next;

    Node(T value) : data (value), next(nullptr) {}

};

// creating the LinkedList class
template <typename T>
class LinkedList {
    private:
    Node<T>*head; // creates a pointer for the head
    Node<T>*tail; // creates a pointer for the tail/
    int num_items;
    
    public:
    LinkedList() : head(nullptr) , tail(nullptr) , num_items(0) {} // constructor 
    ~LinkedList() { clear(); } // deconstructor

    // functions I need to create

    // push_front() this adds a item to the beginning of list
    void adding_front(T value) {
        Node<T>* newNode = new Node<T>(value);
        newNode->next = head;
        head = newNode;
        num_items++;
    }

    // push_back() this adds an item to the end of the list
    void adding_back(T value) {
        Node<T>* newNode = new Node<T>(value);
        newNode->next = tail;
        tail = newNode;
        num_items++;
    }

    // pop_front() this removes the first item in the list
    void rmv_front() {
         if (head != nullptr) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
            }
         num_items--;
         
    }
    
    // pop_back() this removes the last item in the list
    void rmv_back() {
        if (tail != nullptr) {
            Node<T>* temp = tail;
            tail = tail->next;
            delete temp;
        }
        num_items--;
    }

    // front() returns a reference for the first item in the list
    T front_item() {
        if (head != nullptr)
            return head->data;
    }
    
    // back() returns a reference for the last item in the list
    T back_item() {
        if (tail != nullptr)
            return tail->data;
    }
    

    // empty() checks if the list is empty or not, returns T if it is empty
    void is_empty(Node<T>* head, T data) {
        if (head == NULL)
            throw exception("Empty List");
    }


    // void insert(size_t index, const Item_Type& item): Insert item at position index
    // (starting at 0). Insert at the end if index is beyond the end of the list
    // };
    void add_anywhere(size_t index, const Item_Type& item) {
        if (index == 0) {
            Node<Item_Type>& newNode = new Node<T>(item); // create newNode 
            newNode->next = head; // move newNode pointer to head
            head = newNode;
        }

        else { // moves up to the index position, adds the value, then assigns the pointer
            Node<Item_Type>& current_pos = head;
            for (int i = 0; i < index -1; i++) {
                current_pos = current_pos->next;
            }
            newNode->next = current_pos->next;
            current_pos->next = newNode;
        }
        num_items++;
    }

    // bool remove(size_t index): Remove the item at position index. Return true if
    // successful; return false if index is beyond the end of the list
    bool delete_anywhere(size_t index) {
        if (index >= num_items) {
            throw out_of_range("Invalid index");
    
        }
        if (index == 0) {
            Node<T>* temp = head;
            head = head->next;
            delete temp;
        }
        else {
            Node<T>* current_pos = head;
            for (size_t i = 0; i < index - 1; i++) {
                current_pos = current_pos->next;
            }
            Node<T>* temp = current_pos->next;
            current_pos->next = current_pos->next->next;
            delete temp;
        }
    }

    // size_t find(const Item_Type& item): Return the position of the first occurrence of
    // item if it is found. Return the size of the list if it is not found
    size_t find_item(const Item_Type& item) {
        Node<Item_Type>& current_pos = head;
        size_t index = 0;

        while (current_pos != nullprt) {
            if (current_pos->data == item) {
                 return current_pos;
            }
            current_pos = current_pos->next;
            current_pos++;

            }
        return num_items;
        }
};
    

#include <vector>
class Stack {
private:
    std::vector<int> data;

public:

    bool empty() {
        return data.empty();
    }
    void push(int value) {
        data.push_back(value);
    }
    void pop() {
        if (!empty()) {
            data.pop_back();
        }
        else {
            throw std::out_of_range("Empty is the stack.");
        }
         
    }
      int top() {
        if (!empty()) {
            return data.back();
        } else {
            throw std::out_of_range("Cannot get top element as stack is empty.");
        }
    } 

    double ave_stack() {
        if (empty()) {
            throw std::out_of_range("Cannot get top element as stack is empty.");
        }
        else {
            int sum = 0;
            for (int num : data) { // loop to add up the data
                sum += num;
            }
            return sum / data.size(); 
        }
    }

};
